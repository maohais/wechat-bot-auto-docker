name: Sync Gitee Release to GitHub and Trigger Build

on:
  schedule:
    - cron: '0 12 * * *' # 每天12:00 UTC运行，自动检查更新
  workflow_dispatch: # 手动触发工作流

permissions:
  contents: write # 确保有写入权限
  actions: write # 允许触发其他工作流

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests PyGithub

      - name: Compare releases and upload if necessary
        env:
          GITEE_API_URL: "https://gitee.com/api/v5/repos/ilooli/wechat-bot/releases/latest"
          GITHUB_TOKEN: ${{ secrets.TOKEN }} # 使用自定义的 TOKEN 变量
        run: |
          python <<EOF
          import requests
          from github import Github
          import os

          # 获取 Gitee 最新 Release 版本
          gitee_response = requests.get(os.getenv('GITEE_API_URL'))
          if gitee_response.status_code == 200:
              gitee_release = gitee_response.json()
              gitee_version = gitee_release['tag_name']
              gitee_assets = gitee_release['assets']  # 获取所有 assets（文件）
          else:
              raise Exception(f"Failed to fetch Gitee release: {gitee_response.status_code}")

          # 获取 GitHub 最新 Release 版本
          github = Github(os.getenv('GITHUB_TOKEN'))  # 使用 secrets 中的 TOKEN
          repo = github.get_repo("maohais/wechat-bot-auto-docker")
          try:
              github_release = repo.get_latest_release()
              github_version = github_release.tag_name
          except:
              github_version = None

          # 比较版本号，如果 Gitee 上的版本更新或 GitHub 上没有 release，则同步 Gitee Release
          if github_version is None or gitee_version > github_version:
              print(f"Gitee has a newer version: {gitee_version}. Uploading to GitHub...")

              # 下载 Gitee Release 中的每个文件
              file_names = []
              for asset in gitee_assets:
                  asset_url = asset['browser_download_url']
                  file_name = asset_url.split('/')[-1]
                  file_names.append(file_name)

                  print(f"Downloading {file_name} from {asset_url}...")
                  response = requests.get(asset_url, stream=True)
                  with open(file_name, 'wb') as f:
                      for chunk in response.iter_content(chunk_size=1024):
                          if chunk:
                              f.write(chunk)

              # 创建新的 GitHub Release
              new_release = repo.create_git_release(
                  tag=gitee_version,
                  name=f"{gitee_version}",
                  message=f"Sync from Gitee version {gitee_version}",
                  draft=False,
                  prerelease=False
              )

              # 上传每个文件到 GitHub Release
              for file_name in file_names:
                  print(f"Uploading {file_name} to GitHub release...")
                  with open(file_name, 'rb') as f:
                      new_release.upload_asset(f.name)

              print("All files uploaded successfully.")

              # 触发同仓库下的 build.yml 工作流
              print("Triggering the build workflow...")
              trigger_build_workflow = requests.post(
                  f"https://api.github.com/repos/{repo.owner.login}/{repo.name}/actions/workflows/build.yml/dispatches",
                  headers={
                      "Authorization": f"token {os.getenv('GITHUB_TOKEN')}",
                      "Accept": "application/vnd.github.v3+json",
                  },
                  json={"ref": "main"}  # 触发 main 分支的 workflow_dispatch
              )
              if trigger_build_workflow.status_code == 204:
                  print("Build workflow triggered successfully.")
              else:
                  raise Exception(f"Failed to trigger build workflow: {trigger_build_workflow.status_code}")
          else:
              print("GitHub already has the latest version.")
          EOF
